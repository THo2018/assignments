# 🧮 Lab: Menu-Driven Calculator

## ✅ Learning Outcomes

By completing this lab, I was able to:

- ✅ Apply `if/else` and `switch` statements to implement menu options.
- ✅ Validate user input and reject non-numeric values.
- ✅ Handle edge cases like division by zero.
- ✅ Use `enum class` for type-safe menu options.
- ✅ Understand short-circuiting and control flow.
- ✅ Create a complete interactive calculator integrating user input, decisions, and arithmetic operations.

---

## 🧑‍💻 Calculator.cpp

```cpp
#include <iostream> // For cin and cout
#include <limits>   // For numeric_limits

using namespace std; // Make code cleaner, don't need to add std:: 

// Enum class for the calculator options
enum class MenuOptions {
    Add = 1,
    Subtract,
    Multiply,
    Divide,
    Quit
};

// Function to show the user the calculator menu
void showMenu() {
    cout << "\n==== Calculator Menu ====\n";
    cout << "1. Add\n";
    cout << "2. Subtract\n";
    cout << "3. Multiply\n";
    cout << "4. Divide\n";
    cout << "5. Quit\n";
    cout << "Select a choice (1-5): ";
}

// Function to get a numeric (double) input from user safely
double getValidatedNumber(string prompt) {
    double num;
    while (true) {
        cout << prompt;
        cin >> num;

        if (cin.fail()) {
            cout << "Make sure to enter a number.\n";
            cin.clear(); // Clear error state
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
        } else {
            return num; // Valid number entered
        }
    }
}

int main() {
    bool running = true;

    while (running) {
        showMenu();

        int userChoice;
        cin >> userChoice;

        if (cin.fail() || userChoice < 1 || userChoice > 5) {
            cout << "Make sure to enter a number between 1 to 5.\n";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            continue;
        }

        MenuOptions choice = static_cast<MenuOptions>(userChoice);

        if (choice == MenuOptions::Quit) {
            cout << "Exiting calculator. Thank you for using, see you next time.\n";
            break;
        }

        // Get two validated numbers from user
        double num1 = getValidatedNumber("Enter the first number: ");
        double num2 = getValidatedNumber("Enter the second number: ");

        // Perform action based on user choice
        switch (choice) {
            case MenuOptions::Add:
                cout << "Result: " << num1 << " + " << num2 << " = " << (num1 + num2) << "\n";
                break;
            case MenuOptions::Subtract:
                cout << "Result: " << num1 << " - " << num2 << " = " << (num1 - num2) << "\n";
                break;
            case MenuOptions::Multiply:
                cout << "Result: " << num1 << " * " << num2 << " = " << (num1 * num2) << "\n";
                break;
            case MenuOptions::Divide:
                if (num2 == 0) {
                    cout << "Unable to divide by zero, undefined.\n";
                } else {
                    cout << "Result: " << num1 << " / " << num2 << " = " << (num1 / num2) << "\n";
                }
                break;
            default:
                cout << "Error.\n";
                break;
        }
    }

    return 0;
}
